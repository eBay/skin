/**
 * Used for nested grids. This
 * probably needs to be renamed
 */
.grid .grid {
    & > hr {
        background-color: @ds4-color-core-gray-light;
        border: 0;
        height: 1px;
        margin: @grid-gutter / 2 auto;
        position: relative;
        right: @grid-gutter / 2;
        width: calc(~'100% - 48px');
    }
}

/**
 * HIGHLY EXPERIMENTAL
 */
.@{group-name}--top-to-bottom {
    flex-direction: column;
    width: auto;

    .@{item-name} {
        width: auto;
    }
}

/**
 *Need to clean this up
 */

.create-nested-grid(@columns) {
    .loop(@index) when (@index > 0) {
        .nested-grid(@index, @columns);
        .loop(@index - 1);
    }

    .loop(@columns);
}

.create-nested-grid(@columns, @type) {
    .loop(@index) when (@index > 0) {
        .nested-grid(@index, @columns, @type);
        .loop(@index - 1);
    }

    .loop(@columns);
}

.nested-grid(@index, @columns) {

    .nested-loop(@nested-index) when (@nested-index <= @index) and not (@index = @columns) {
        /**
         *   All the subgrid
         */
        .@{item-name}--@{nested-index}of@{index} {
            flex: 0 0 percentage(@nested-index / @index);
            max-width: percentage(@nested-index / @index);
            width: percentage(@nested-index / @index);
        }

        .nested-loop(@nested-index + 1);
    }

    .nested-loop(1);
}

.nested-grid(@index, @columns, @type) {

    .nested-loop(@nested-index) when (@nested-index <= @index) and not (@index = @columns) {
        /**
         *   All the subgrid
         */
        .@{item-name}--@{nested-index}of@{index}-@{type} {
            flex: 0 0 percentage(@nested-index / @index);
            max-width: percentage(@nested-index / @index);
            width: percentage(@nested-index / @index);
        }

        .nested-loop(@nested-index + 1);
    }

    .nested-loop(1);
}
