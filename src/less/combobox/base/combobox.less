.combobox {
    box-sizing: border-box;
    line-height: normal;
    position: relative;
}

span.combobox {
    display: inline-block;
    vertical-align: bottom;
}

.combobox__value {
    .truncate();

    flex: 1 0 auto;
}

.combobox svg {
    margin-left: 8px;
    pointer-events: none;
    position: absolute;
    right: 17px; // +1 px for the border on the input box
    top: calc(50% - 4px); // 4px is half the height of dropdown icon size
}

.combobox__options--fix-width[role="listbox"] {
    width: 100%;
}

.combobox__options--reverse[role="listbox"] {
    right: 0;
}

.combobox__listbox {
    .dropdown();
}

.combobox__option[role^="option"] {
    .dropdown-option-base();

    cursor: default; // needed to override text cursor
    position: relative; // needed for icon to show properly

    &:not(:last-child) {
        margin-bottom: 1px;
    }

    &:hover {
        background-color: @dropdown-item-hover-background-color;
    }

    svg.icon {
        .dropdown-status();
    }
}

.combobox__option--active[role^="option"] {
    background-color: @dropdown-item-hover-background-color;

    svg.icon {
        opacity: 1;
    }
}

// refactor in v11 to use .combobox__control--actionable (added in 10.3.0)
.combobox__control {
    button.icon-btn {
        padding: 0;
        position: absolute;
        right: 0;

        svg {
            left: 0;
            margin: 0;
            right: 0;
        }
    }
}

.combobox .expand-btn[aria-expanded="true"] {
    border-bottom-color: transparent;
}

.combobox--expanded .combobox__listbox {
    display: block;
}

.combobox--expanded svg.icon--dropdown {
    transform: rotate(180deg);
}

.combobox__control > input {
    appearance: none;
    background-color: @combobox-input-background-color;
    border: 1px solid @combobox-input-border-color;
    border-radius: @combobox-input-border-radius;
    box-sizing: border-box;
    color: inherit;
    font-family: inherit;
    font-size: inherit;
    height: @combobox-input-height;
    margin-left: 0;
    margin-right: 0;
    padding: @combobox-input-padding;

    &[readonly] {
        // fixes the cursor in firefox (1 of 2)
        color: transparent;
        cursor: default;
        // fixes the cursor in firefox (2 of 2)
        text-shadow: 0 0 0 @combobox-input-readonly-text-shadow-color;
        -webkit-user-select: none; // Fix to get rid of unintended cursor in iOS mobile

        &::-moz-selection,
        &::selection {
            background: @combobox-input-readonly-selection-background;
        }
    }

    &[disabled],
    &[aria-disabled="true"] {
        border-color: @combobox-input-disabled-border-color;
        color: @combobox-input-disabled-color;

        &[readonly] {
            text-shadow: 0 0 0 @combobox-input-disabled-readonly-text-shadow-color;
        }

        & + svg {
            opacity: 0.5;
        }
    }

    &[aria-expanded="true"] {
        border-bottom: 0;
        padding-bottom: 1px; // fix for movement when border is removed
    }

    &[aria-invalid="true"] {
        border-color: @combobox-input-invalid-color;
    }

    &::-ms-clear {
        display: none;
    }
}

.combobox__control--borderless > input {
    background-color: transparent;
    border-color: transparent;
    padding-left: 0;
}

.combobox__control > input:focus {
    border-color: @combobox-input-focus-border-color;
    outline: 0;
}

.combobox__control--borderless > input:focus {
    border-color: transparent;
    outline: none;
}

.combobox--fluid {
    width: 100%;

    .combobox__control > input {
        width: 100%;
    }
}

@media all and (-ms-high-contrast: active),
    all and (-ms-high-contrast: none) {
    *::-ms-backdrop,
    .combobox__value {
        min-width: 100%;
    }
}

// RTL
[dir="rtl"] {
    .combobox__control > input {
        padding: 0 16px 0 32px;
    }

    .combobox__control > svg.icon,
    .combobox__control > button {
        margin-left: 0;
        margin-right: 8px;
        right: unset;
    }

    .combobox__control > svg.icon {
        left: 16px;
        margin-top: 1.3px;
    }

    .combobox__control > button {
        left: 0;
    }
}
